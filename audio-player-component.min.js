(() => {
  // audio-player-component.ts
  var g = {
    aac: "audio/aac",
    caf: "audio/caf; codecs=opus",
    mp3: "audio/mp3",
    mp4: "audio/mp4",
    m4a: "audio/mp4",
    oga: "audio/ogg; codecs=vorbis",
    ogg: "audio/ogg; codecs=vorbis",
    opus: "audio/ogg; codecs=opus",
    wav: "audio/wave",
    webm: "audio/webm"
  }, d = class t extends HTMLElement {
    #a;
    #i;
    #l;
    #s;
    #o;
    #p;
    #d;
    #h;
    #t = document.createElement("audio");
    #e = null;
    #r = !1;
    #n;
    static get observedAttributes() {
      return ["title", "artist", "image", "compact", "blurred", "min-height", "sources", "colour", "dark"];
    }
    static get svgPlay() {
      return '<svg xmlns="https://www.w3.org/2000/svg" width="24" height="24" viewBox="-1 0 23 24"><title>Play</title><polygon class="icon-play" points="19.05 12 6 3.36 6 20.64 19.05 12"/></svg>';
    }
    static get svgPause() {
      return '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><title>Pause</title><g><rect class="icon-pause" x="6" y="3" width="4" height="18"/><rect class="icon-pause" x="14" y="3" width="4" height="18"/></g></svg>';
    }
    constructor() {
      super(), this.#n = this.attachShadow({ mode: "open" }), this.#a = this.getAttribute("title"), this.#i = this.getAttribute("artist"), this.#l = this.getAttribute("image") || "", this.#s = this.getAttribute("compact") !== null, this.#p = this.getAttribute("dark") !== null, this.#h = this.getAttribute("colour") || "#3FA9F5", this.#o = !0;
      let e = this.getAttribute("blurred");
      e === null ? this.#o = !!(this.#a && this.#i) : e === "false" && (this.#o = !1);
      let a = Number(this.getAttribute("min-height") ?? 280);
      this.#d = Number.isSafeInteger(a) ? a : 280;
      let i = this.getAttribute("sources")?.split(",") ?? [];
      this.loadAudio(i), this.#n.appendChild(t.createElement({ tagName: "style", textContent: this.styleCss })), this.createPlayer();
    }
    static padTime(e) {
      return e < 10 ? `0${e}` : e.toString();
    }
    static createElement({ tagName: e = "div", className: a = "", ...i } = {}) {
      let s = document.createElement(e);
      s.className = a;
      for (let [r, o] of Object.entries(i))
        s[r] = o;
      return s;
    }
    loadAudio(e) {
      if (e.length === 1) {
        this.#t.src = e[0], this.#t.load();
        return;
      }
      for (let a of e) {
        let i = a.split(".").pop(), s = g[i ?? "mp3"];
        if (!s) {
          console.warn(`Could not find MIME-type for '${i}' type. Skipping.`);
          continue;
        }
        this.#t.appendChild(
          t.createElement({
            tagName: "source",
            src: a,
            type: s
          })
        );
      }
      this.#t.load();
    }
    get styleCss() {
      return `
		.tap--container {
			width: 100%;
			position: relative;
			display: flex;
			flex-direction: column;
			overflow: hidden;
			border-radius: 32px;
			box-shadow: 0 2px 16px rgba(0, 0, 0, 0.25);
			justify-content: flex-end;
		}

		.tap--overlay {
			background: linear-gradient(rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.5) 100%);
			position: absolute;
			width: 100%;
			height: 100%;
			z-index: -998;
		}

		.tap--img {
			position: absolute;
			width: 100%;
			height: 100%;
			object-fit: cover;
			z-index: -999;
		}

		.tap--img.blurred {
			filter: blur(16px);
		}

		.tap--metadata {
			display: flex;
			flex-direction: column;
			margin: 32px;
			color: #fff;
			user-select: none;
			text-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
		}

		.tap--metadata__title {
			font-size: 32px;
			font-weight: 900;
			display: block;
			margin-bottom: 16px;
		}

		.tap--metadata__artist {
			font-size: 28px;
			font-weight: 700;
		}

		.tap--container .tap--controls {
			margin: 0 16px 16px;
		}

		.tap--controls {
			display: flex;
			background-color: var(--audio-player-controls-bg);
			border-radius: 32px;
			height: 64px;
			align-items: center;
			box-shadow: 0 2px 16px rgba(0, 0, 0, 0.25);

			--audio-player-controls-bg: #f9f9f9;
			--audio-player-button: #fff;
			--audio-player-button-hover: #f9f9f9;
			--audio-player-border: #999;
			--audio-player-border-hover: #666;
			--audio-player-progress: #f0f0f0;
			--audio-player-text: #333;
		}
		.tap--controls.dark {
			--audio-player-controls-bg: #222;
			--audio-player-button: #333;
			--audio-player-button-hover: #555;
			--audio-player-border: #aaa;
			--audio-player-border-hover: #bbb;
			--audio-player-progress: #555;
			--audio-player-text: #fff;
		}

		.tap--button {
			cursor: pointer;
			font-size: 24px;
			border-radius: 24px;
			width: 48px;
			height: 48px;
			position: relative;
			margin-left: 8px;
			background-color: var(--audio-player-button);
		}

		.tap--button:hover {
			border: 2px solid var(--audio-player-border-hover);
			background-color: var(--audio-player-button-hover);
		}

		.tap--button,
		.tap--progress--bar {
			border: 2px solid var(--audio-player-border);
		}

		.tap--button svg {
			position: absolute;
			top: 12.5%;
			left: 12.5%;
			width: 75%;
			height: 75%;
			fill: var(--audio-player-text);
		}

		.tap--progress--bar {
			flex: 1;
			height: 24px;
			background-color: var(--audio-player-progress);
			border-radius: 12px;
			margin: 0 12px;
			cursor: pointer;
			position: relative;
			overflow: hidden;
		}

		.tap--progress--playhead {
			border-radius: 0 12px 12px 0;
			position: absolute;
			top: 0;
			left: 0;
			height: 100%;
			width: 0%;
			pointer-events: none;
			transition: width 0.2s;
		}

		.tap--progress--playhead {
			box-shadow: 0 0 32px rgba(0, 0, 0, 0.75);
		}

		.tap--progress--timestamp {
			font-weight: 700;
			font-family: monospace;
			margin-right: 16px;
			color: var(--audio-player-text);
			user-select: none;
		}

		@media (max-width: 640px) {
			.tap--metadata__title {
				font-size: 24px;
			}
			.tap--metadata__artist {
				font-size: 18px;
			}
			.tap--container .tap--controls {
				margin: 8px;
			}
		}
		`;
    }
    addOverlayToContainer(e) {
      if (this.#s) return;
      let a = t.createElement({
        tagName: "img",
        className: "tap--img",
        src: this.#l
      });
      if (this.#o && a.classList.add("blurred"), e.appendChild(a), !(this.#a && this.#i)) return;
      let i = t.createElement({ className: "tap--overlay" }), s = t.createElement({ className: "tap--metadata" }), r = t.createElement({
        tagName: "span",
        className: "tap--metadata__title",
        innerText: this.#a
      }), o = t.createElement({
        tagName: "span",
        className: "tap--metadata__artist",
        innerText: this.#i
      });
      s.appendChild(r), s.appendChild(o), e.appendChild(i), e.appendChild(s);
    }
    createPlayer() {
      let e = t.createElement({ className: "tap--container" });
      this.#s || (e.style.minHeight = `${this.#d}px`), this.addOverlayToContainer(e);
      let a = t.createElement({ className: "tap--controls" });
      this.#p && a.classList.add("dark");
      let i = t.createElement({ className: "tap--progress--bar" }), s = t.createElement({ className: "tap--progress--playhead" }), r = t.createElement({ className: "tap--progress--timestamp" });
      this.#e = t.createElement({
        tagName: "button",
        className: "tap--button"
      }), this.#e.innerHTML = t.svgPlay, s.style.backgroundColor = this.#h;
      let o = () => {
        let n = t.padTime(Math.floor(this.#t.currentTime / 60)), p = t.padTime(Math.floor(this.#t.currentTime % 60)), c = t.padTime(Math.floor((this.#t.duration || 0) / 60)), u = t.padTime(Math.floor((this.#t.duration || 0) % 60));
        r.innerHTML = `${n}:${p}<br/>${c}:${u}`, s.style.width = `${this.#t.currentTime * 100 / (this.#t.duration || 1)}%`;
      };
      this.#e.onclick = () => {
        if (!this.#r) return this.play();
        this.pause();
      };
      let h = (n) => {
        let p = n.layerX / n.target.offsetWidth;
        this.#t.fastSeek(this.#t.duration * p);
      }, l = !1;
      if (i.onmousedown = () => {
        l = !0;
      }, i.onmouseup = () => {
        l = !1;
      }, i.onmousemove = (n) => l && h(n), i.onclick = h, i.appendChild(s), a.appendChild(this.#e), a.appendChild(i), a.appendChild(r), o(), this.#t.ondurationchange = o, this.#t.ontimeupdate = o, this.#t.onended = () => {
        this.#t.currentTime = 0, this.#r = !1, this.#e.innerHTML = t.svgPlay;
      }, this.#t.style.display = "none", this.#s) {
        this.#n.appendChild(a);
        return;
      }
      e.appendChild(a), this.#n.appendChild(e);
    }
    async play() {
      await this.#t.play(), this.#r = !0, this.#e.innerHTML = t.svgPause;
    }
    pause() {
      this.#t.pause(), this.#r = !1, this.#e.innerHTML = t.svgPlay;
    }
    stop() {
      this.pause(), this.#t.fastSeek(0);
    }
  };
  window.customElements.define("audio-player", d);
})();
