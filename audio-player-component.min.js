(() => {
  // audio-player-component.ts
  var m = {
    aac: "audio/aac",
    caf: "audio/caf; codecs=opus",
    mp3: "audio/mp3",
    mp4: "audio/mp4",
    m4a: "audio/mp4",
    oga: "audio/ogg; codecs=vorbis",
    ogg: "audio/ogg; codecs=vorbis",
    opus: "audio/ogg; codecs=opus",
    wav: "audio/wave",
    webm: "audio/webm"
  }, c = class t extends HTMLElement {
    #s;
    #e;
    #i;
    #n;
    #t = document.createElement("audio");
    #a = null;
    #r = !1;
    #l = !1;
    #o;
    static get observedAttributes() {
      return [
        "title",
        "artist",
        "image",
        "compact",
        "blurred",
        "min-height",
        "sources",
        "colour",
        "dark",
        "length-secs"
      ];
    }
    static get svgPlay() {
      return '<svg xmlns="https://www.w3.org/2000/svg" width="24" height="24" viewBox="-1 0 23 24"><title>Play</title><polygon class="icon-play" points="19.05 12 6 3.36 6 20.64 19.05 12"/></svg>';
    }
    static get svgPause() {
      return '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><title>Pause</title><g><rect class="icon-pause" x="6" y="3" width="4" height="18"/><rect class="icon-pause" x="14" y="3" width="4" height="18"/></g></svg>';
    }
    static get svgLoading() {
      return '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="loading"><circle cx="12" cy="4" r="2.5"/><circle cx="6" cy="6" r="2.25"/><circle cx="4" cy="12" r="2"/><circle cx="6" cy="18" r="1.75"/><circle cx="12" cy="20" r="1.5"/><circle cx="18" cy="18" r="1.25"/><circle cx="20" cy="12" r="1"/><circle cx="18" cy="6" r="0.75"/></svg>';
    }
    static get svgPlus() {
      return '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><title>Add to Queue</title><polygon points="21,10 14,10 14,3 10,3 10,10 3,10 3,14 10,14 10,21 14,21 14,14 21,14 "/></svg>';
    }
    constructor() {
      super(), this.#o = this.attachShadow({ mode: "open" }), this.#s = this.getAttribute("title"), this.#e = this.getAttribute("artist"), this.#i = this.getAttribute("album"), this.#n = this.getAttribute("compact") !== null;
      let e = this.getAttribute("preload") ?? "auto";
      (e === "" || e === "none" || e === "auto" || e === "metadata") && (this.#t.preload = e);
      let i = this.getAttribute("sources")?.split(",") ?? [];
      this.loadAudio(i);
    }
    static padTime(e) {
      return e < 10 ? `0${e}` : e.toString();
    }
    static createElement({ tagName: e = "div", className: i = "", ...s } = {}) {
      let r = document.createElement(e);
      r.className = i;
      for (let [l, o] of Object.entries(s))
        r[l] = o;
      return r;
    }
    loadAudio(e) {
      if (e.length === 1) {
        this.#t.src = e[0];
        return;
      }
      for (let i of e) {
        let s = i.split(".").pop(), r = m[s ?? "mp3"];
        if (!r) {
          console.warn(`Could not find MIME-type for '${s}' type. Skipping.`);
          continue;
        }
        this.#t.appendChild(
          t.createElement({
            tagName: "source",
            src: i,
            type: r
          })
        );
      }
    }
    get styleCss() {
      return `
		.tap--container {
			width: 100%;
			position: relative;
			display: flex;
			flex-direction: column;
			overflow: hidden;
			border-radius: 32px;
			box-shadow: 0 2px 16px rgba(0, 0, 0, 0.25);
			justify-content: flex-end;
		}

		.tap--overlay {
			background: linear-gradient(rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.5) 100%);
			position: absolute;
			width: 100%;
			height: 100%;
			z-index: -998;
		}

		.tap--img {
			position: absolute;
			width: 100%;
			height: 100%;
			object-fit: cover;
			z-index: -999;
		}

		.tap--img.blurred {
			filter: blur(16px);
		}

		.tap--metadata {
			display: flex;
			flex-direction: column;
			margin: 32px;
			color: #fff;
			user-select: none;
			text-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
		}

		.tap--metadata__title {
			font-size: 32px;
			font-weight: 700;
			display: block;
			margin-bottom: 16px;
		}

		.tap--metadata__artist {
			font-size: 28px;
			font-weight: 400;
		}

		.tap--container .tap--controls {
			margin: 0 16px 16px;
		}

		.tap--controls {
			display: flex;
			background-color: var(--audio-player-controls-bg);
			border-radius: 32px;
			height: 64px;
			align-items: center;
			box-shadow: 0 2px 16px rgba(0, 0, 0, 0.25);

			--audio-player-controls-bg: #f9f9f9;
			--audio-player-button: #fff;
			--audio-player-button-hover: #f9f9f9;
			--audio-player-border: #999;
			--audio-player-border-hover: #666;
			--audio-player-progress: #f0f0f0;
			--audio-player-text: #333;
		}
		.tap--controls.dark {
			--audio-player-controls-bg: #222;
			--audio-player-button: #333;
			--audio-player-button-hover: #555;
			--audio-player-border: #aaa;
			--audio-player-border-hover: #bbb;
			--audio-player-progress: #555;
			--audio-player-text: #fff;
		}

		.tap--button {
			cursor: pointer;
			font-size: 24px;
			border-radius: 24px;
			width: 48px;
			height: 48px;
			position: relative;
			margin: 0 8px;
			background-color: var(--audio-player-button);
		}

		.tap--button:hover {
			border: 2px solid var(--audio-player-border-hover);
			background-color: var(--audio-player-button-hover);
		}

		.tap--button,
		.tap--progress--bar {
			border: 2px solid var(--audio-player-border);
		}

		.tap--button svg {
			position: absolute;
			top: 12.5%;
			left: 12.5%;
			width: 75%;
			height: 75%;
			fill: var(--audio-player-text);
		}

		.tap--progress--bar {
			flex: 1;
			height: 24px;
			background-color: var(--audio-player-progress);
			border-radius: 12px;
			margin: 0;
			cursor: pointer;
			position: relative;
			overflow: hidden;
		}

		.tap--progress--playhead {
			border-radius: 0 12px 12px 0;
			position: absolute;
			top: 0;
			left: 0;
			height: 100%;
			width: 0%;
			pointer-events: none;
			transition: width 0.2s;
		}

		.tap--progress--playhead {
			box-shadow: 0 0 32px rgba(0, 0, 0, 0.75);
		}

		.tap--progress--timestamp {
			font-weight: 700;
			font-family: monospace;
			margin: 0 8px;
			color: var(--audio-player-text);
			user-select: none;
		}

		.loading {
			animation: 1s infinite loading linear;
		}

		@keyframes loading {
			from { transform: rotate(0); }
			to { transform: rotate(360deg); }
		}

		@media (max-width: 640px) {
			.tap--metadata__title {
				font-size: 24px;
			}
			.tap--metadata__artist {
				font-size: 18px;
			}
			.tap--container .tap--controls {
				margin: 8px;
			}
		}
		`;
    }
    addOverlayToContainer(e) {
      if (this.#n) return;
      let i = t.createElement({
        tagName: "img",
        className: "tap--img",
        src: this.getAttribute("image") || ""
      }), s = this.getAttribute("blurred");
      if ((s === null ? !!(this.#s && this.#e && this.#i) : s !== "false") && i.classList.add("blurred"), e.appendChild(i), !(this.#s || this.#e || this.#i)) return;
      let l = t.createElement({ className: "tap--overlay" }), o = t.createElement({ className: "tap--metadata" }), p = t.createElement({
        tagName: "span",
        className: "tap--metadata__title",
        textContent: this.#s
      }), n = "";
      this.#e === null && this.#i !== null ? n = this.#i : this.#e !== null && this.#i === null ? n = this.#e : this.#e !== null && this.#i !== null && (n = `from ${this.#i}, by ${this.#e}`);
      let a = t.createElement({
        tagName: "span",
        className: "tap--metadata__artist",
        textContent: n
      });
      o.appendChild(p), o.appendChild(a), e.appendChild(l), e.appendChild(o);
    }
    connectedCallback() {
      this.#o.innerHTML = "", this.#o.appendChild(t.createElement({ tagName: "style", textContent: this.styleCss }));
      let e = t.createElement({ className: "tap--container" });
      if (!this.#n) {
        let a = Number(this.getAttribute("min-height") ?? 280), d = Number.isSafeInteger(a) ? a : 280;
        e.style.minHeight = `${d}px`;
      }
      this.addOverlayToContainer(e);
      let i = t.createElement({ className: "tap--controls" });
      this.getAttribute("dark") !== null && i.classList.add("dark");
      let s = t.createElement({ className: "tap--progress--bar" }), r = t.createElement({ className: "tap--progress--playhead" }), l = t.createElement({ className: "tap--progress--timestamp" });
      this.#a = t.createElement({
        tagName: "button",
        className: "tap--button",
        innerHTML: t.svgPlay
      }), r.style.backgroundColor = this.getAttribute("colour") || this.getAttribute("color") || "#3FA9F5";
      let o = () => {
        let a = Number(this.getAttribute("length-secs") ?? 0), d = t.padTime(Math.floor(this.#t.currentTime / 60)), h = t.padTime(Math.floor(this.#t.currentTime % 60)), u = t.padTime(Math.floor((this.#t.duration || a) / 60)), g = t.padTime(Math.floor((this.#t.duration || a) % 60));
        l.innerHTML = `${d}:${h}<br/>${u}:${g}`, r.style.width = `${this.#t.currentTime * 100 / (this.#t.duration || 1)}%`;
      };
      this.#a.onclick = () => {
        if (window.TomboAudioPlayer?.addToPlaylistAndPlay) {
          window.TomboAudioPlayer.addToPlaylistAndPlay({
            title: this.#s,
            artist: this.#e,
            album: this.#i,
            src: this.#t.src,
            imageSrc: this.getAttribute("image")
          });
          return;
        }
        if (!(this.#r && !this.#l)) {
          if (!this.#r) return this.play();
          this.pause();
        }
      };
      let p = (a) => {
        let d = a.layerX / a.target.offsetWidth;
        if (this.#t.fastSeek) {
          this.#t.fastSeek(this.#t.duration * d);
          return;
        }
        this.#t.currentTime = this.#t.duration * d;
      }, n = !1;
      if (s.onmousedown = () => {
        n = !0;
      }, s.onmouseup = () => {
        n = !1;
      }, s.onmousemove = (a) => n && p(a), s.onclick = p, s.appendChild(r), i.appendChild(this.#a), i.appendChild(s), i.appendChild(l), window.TomboAudioPlayer?.addToPlaylist) {
        let a = t.createElement({
          tagName: "button",
          className: "tap--button",
          innerHTML: t.svgPlus
        });
        a.onclick = () => {
          window.TomboAudioPlayer.addToPlaylist({
            title: this.#s,
            album: this.#i,
            artist: this.#e,
            src: this.#t.src,
            imageSrc: this.getAttribute("image")
          });
        }, i.appendChild(a);
      }
      if (o(), this.#t.ondurationchange = o, this.#t.ontimeupdate = o, this.#t.onended = () => {
        this.#t.currentTime = 0, this.#r = !1, this.#a.innerHTML = t.svgPlay;
      }, this.#t.style.display = "none", this.#n) {
        this.#o.appendChild(i);
        return;
      }
      e.appendChild(i), this.#o.appendChild(e);
    }
    async play() {
      this.#r = !0, this.#t.readyState <= 1 && (this.#t.load(), this.#a.innerHTML = t.svgLoading), await this.#t.play(), this.#l = !0, this.#a.innerHTML = t.svgPause;
    }
    pause() {
      this.#t.pause(), this.#r = !1, this.#a.innerHTML = t.svgPlay;
    }
    stop() {
      this.pause(), this.#t.fastSeek(0);
    }
  };
  window.customElements.define("audio-player", c);
})();
